///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Bakalarka.React.myapp
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The myapp_Add_new_item recording.
    /// </summary>
    [TestModule("43f38394-d962-4520-bbf5-ebb4bc864ab7", ModuleType.Recording, 1)]
    public partial class Myapp_Add_new_item : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Bakalarka.BakalarkaRepository repository.
        /// </summary>
        public static global::Bakalarka.BakalarkaRepository repo = global::Bakalarka.BakalarkaRepository.Instance;

        static Myapp_Add_new_item instance = new Myapp_Add_new_item();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Myapp_Add_new_item()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Myapp_Add_new_item Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable navbarDropdown.
        /// </summary>
        [TestVariable("4f2a6af9-4918-4347-a681-5b01db437e28")]
        public string navbarDropdown
        {
            get { return repo.navbarDropdown; }
            set { repo.navbarDropdown = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'ReactApp.Root.MiniApps' at Center.", repo.ReactApp.Root.MiniAppsInfo, new RecordItemIndex(0));
            repo.ReactApp.Root.MiniApps.MoveTo();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ReactApp.Root.ToDo' at Center.", repo.ReactApp.Root.ToDoInfo, new RecordItemIndex(1));
            repo.ReactApp.Root.ToDo.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking EnsureVisible() on item 'ReactApp.Root.Name'.", repo.ReactApp.Root.NameInfo, new RecordItemIndex(2));
            repo.ReactApp.Root.Name.EnsureVisible();
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "TodoBegin", null, false, new RecordItemIndex(3));
            
            // Set name
            Report.Log(ReportLevel.Info, "Section", "Set name", new RecordItemIndex(4));
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking EnsureVisible() on item 'ReactApp.Root.Name'.", repo.ReactApp.Root.NameInfo, new RecordItemIndex(5));
            repo.ReactApp.Root.Name.EnsureVisible();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ReactApp.Root.Name' at Center.", repo.ReactApp.Root.NameInfo, new RecordItemIndex(6));
            repo.ReactApp.Root.Name.Click();
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Set value", "Setting attribute Value to 'Test' on item 'ReactApp.Root.Name'.", repo.ReactApp.Root.NameInfo, new RecordItemIndex(7));
            //repo.ReactApp.Root.Name.Element.SetAttributeValue("Value", "Test");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'Test' with focus on 'ReactApp.Root.Name'.", repo.ReactApp.Root.NameInfo, new RecordItemIndex(8));
            repo.ReactApp.Root.Name.PressKeys("Test");
            Delay.Milliseconds(0);
            
            // Set description
            Report.Log(ReportLevel.Info, "Section", "Set description", new RecordItemIndex(9));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ReactApp.Root.Description' at Center.", repo.ReactApp.Root.DescriptionInfo, new RecordItemIndex(10));
            repo.ReactApp.Root.Description.Click();
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Set value", "Setting attribute InnerText to 'new item' on item 'ReactApp.Root.Description'.", repo.ReactApp.Root.DescriptionInfo, new RecordItemIndex(11));
            //repo.ReactApp.Root.Description.Element.SetAttributeValue("InnerText", "new item");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'item' with focus on 'ReactApp.Root.Description'.", repo.ReactApp.Root.DescriptionInfo, new RecordItemIndex(12));
            repo.ReactApp.Root.Description.PressKeys("item");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(13));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ReactApp.Root.AddItem' at Center.", repo.ReactApp.Root.AddItemInfo, new RecordItemIndex(14));
            repo.ReactApp.Root.AddItem.Click();
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "TodoAddedItem", null, false, new RecordItemIndex(15));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
